{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"30a0df64-d54c-5a23-ac14-16057fe394e5","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = [themes[\"default\"]];\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(SectionTitle, {\n    mdxType: \"SectionTitle\"\n  }, \"Intro to Docker\"), mdx(Layout, {\n    noTitle: true,\n    noSubtitle: true,\n    icon: 'https://s3.amazonaws.com/media-p.slid.es/uploads/841906/images/5646147/logo-slim-white.png',\n    background: 'https://s3.amazonaws.com/media-p.slid.es/uploads/841906/images/5646146/Screen_Shot_2019-01-05_at_1.59.35_PM.png',\n    style: {\n      color: 'white'\n    },\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Intro to Docker\"), mdx(\"h4\", null, \"25-26 Nov. 2019\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Code of Conduct\"), mdx(\"div\", {\n    style: {\n      textAlign: 'justify '\n    }\n  }, mdx(\"p\", null, \"We expect cooperation from all participants to help ensure a safe environment for everybody.\"), mdx(\"p\", null, \"We treat everyone with respect, we refrain from using offensive language and imagery, and we encourage to report any derogatory or offensive behavior to a member of the JSLeague community.\"), mdx(\"p\", null, \"We provide a fantastic environment for everyone to learn and share skills regardless of gender, gender identity and expression, age, sexual orientation, disability, physical appearance, body size, race, ethnicity, religion (or lack thereof), or technology choices.\"), mdx(\"p\", null, \"We value your attendance and your participation in the JSLeague community and expect everyone to accord to the community Code of Conduct at all JSLeague workshops and other events.\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(Split, {\n    mdxType: \"Split\"\n  }, mdx(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: '50vw'\n    }\n  }, mdx(\"img\", {\n    src: \"https://scontent.fotp3-2.fna.fbcdn.net/v/t1.0-9/30516640_1677492658984219_7229603649175945216_n.jpg?_nc_cat=100&_nc_ohc=11itfIy5bbQAQkOCwfY45pBTxNccawCp9HnRKEB1Krcoza6cD_ktCxq8w&_nc_ht=scontent.fotp3-2.fna&oh=f7b0211986cc81d300c37de914ee18a2&oe=5E421707\",\n    style: {\n      borderRadius: \"100%\",\n      width: '25vmin',\n      height: '25vmin'\n    }\n  })), mdx(\"div\", {\n    style: {\n      textAlign: 'left',\n      width: '50vw'\n    }\n  }, mdx(\"h2\", null, \"Sabin Marcu\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, \"Software Engineer @ R/GA\"), mdx(\"li\", null, \"Anything web since '09\"), mdx(\"li\", null, \"React since 2015\"), mdx(\"li\", null, \"React & GraphQL @ JSLeague\"))))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Overview\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Overview\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Overview\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Agenda - Day 1\"), mdx(Split, {\n    sx: {\n      textAlign: 'left',\n      fontSize: 24\n    },\n    mdxType: \"Split\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"General Introduction\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Comparison to other virtualization solutions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Expose Ports\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Volume Mounts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Running Examples & Exercises\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dockerfile\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Arguments\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Environment Variables\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Building a docker image\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"docker-compose.yml\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Running a docker-compose stack\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Overview\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Agenda - Day 2\"), mdx(Split, {\n    sx: {\n      textAlign: 'left',\n      fontSize: 24\n    },\n    mdxType: \"Split\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lifecycle & Process Management\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Interacting with running images\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Networks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Volumes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Types of Mounts\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dependency & Restart Management\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Image management & Tagging\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pushing to remote\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Env files\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dynamic configs (develop, testing, production)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CI\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Introduction\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(Words, {\n    mdxType: \"Words\"\n  }, mdx(Link, {\n    noColor: true,\n    mdxType: \"Link\"\n  }, \"Docker\"), \" is a set of \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/Platform_as_a_service\",\n    mdxType: \"Link\"\n  }, \"platform as a service\"), \" (PaaS) products that use \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"OS-level virtualization\"), \" to deliver software in packages called containers. \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"Containers\"), \" are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through \", mdx(Link, {\n    href: \"https://docs.docker.com/network/\",\n    mdxType: \"Link\"\n  }, \"well defined channels\"), \". All containers are run by a single \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/Kernel_(operating_system)\",\n    mdxType: \"Link\"\n  }, \"operating-system kernel\"), \" and are thus more lightweight than \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/Virtual_machine\",\n    mdxType: \"Link\"\n  }, \"virtual machines\"), \".\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(Split, {\n    mdxType: \"Split\"\n  }, mdx(Words, {\n    mdxType: \"Words\"\n  }, mdx(Link, {\n    noColor: true,\n    mdxType: \"Link\"\n  }, \"Docker\"), \" is a set of \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/Platform_as_a_service\",\n    mdxType: \"Link\"\n  }, \"platform as a service\"), \" (PaaS) products that use \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"OS-level virtualization\"), \" to deliver software in packages called containers. \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"Containers\"), \" are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through \", mdx(Link, {\n    noColor: true,\n    href: \"https://docs.docker.com/network/\",\n    mdxType: \"Link\"\n  }, \"well defined channels\"), \". All containers are run by a single \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/Kernel_(operating_system)\",\n    mdxType: \"Link\"\n  }, \"operating-system kernel\"), \" and are thus more lightweight than \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/Virtual_machine\",\n    mdxType: \"Link\"\n  }, \"virtual machines\"), \".\"), mdx(Words, {\n    mdxType: \"Words\"\n  }, mdx(Link, {\n    noColor: true,\n    mdxType: \"Link\"\n  }, \"Platform as a Service (PaaS)\"), \" or \", mdx(Link, {\n    noColor: true,\n    mdxType: \"Link\"\n  }, \"Application Platform as a Service (aPaaS)\"), \" or platform-based service is a category of \", mdx(Link, {\n    href: \"https://ww.wikiwand.com/en/Cloud_computing#Service_models\",\n    mdxType: \"Link\"\n  }, \"cloud computing services\"), \" that provides a \", mdx(Link, {\n    href: \"www.wikiwand.com/en/Computing_platform\",\n    mdxType: \"Link\"\n  }, \"platform\"), \" allowing customers to \", mdx(Link, {\n    noColor: true,\n    mdxType: \"Link\"\n  }, \"develop, run and manage applications\"), \" without the complexity of building and maintaining the infrastructure typically associated with developing and launching an app.\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(Words, {\n    mdxType: \"Words\"\n  }, mdx(Link, {\n    noColor: true,\n    mdxType: \"Link\"\n  }, \"Docker\"), \" is a set of \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/Platform_as_a_service\",\n    mdxType: \"Link\"\n  }, \"platform as a service\"), \" (PaaS) products that use \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"OS-level virtualization\"), \" to deliver software in packages called containers. \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"Containers\"), \" are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through \", mdx(Link, {\n    noColor: true,\n    href: \"https://docs.docker.com/network/\",\n    mdxType: \"Link\"\n  }, \"well defined channels\"), \". All containers are run by a single \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/Kernel_(operating_system)\",\n    mdxType: \"Link\"\n  }, \"operating-system kernel\"), \" and are thus more lightweight than \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/Virtual_machine\",\n    mdxType: \"Link\"\n  }, \"virtual machines\"), \".\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"img\", {\n    \"src\": \"https://s3.amazonaws.com/media-p.slid.es/uploads/776/images/6787931/pasted-from-clipboard.png\",\n    \"alt\": \"Docker VM Comparison\"\n  })), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(Words, {\n    mdxType: \"Words\"\n  }, mdx(Link, {\n    noColor: true,\n    mdxType: \"Link\"\n  }, \"Docker\"), \" is a set of \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/Platform_as_a_service\",\n    mdxType: \"Link\"\n  }, \"platform as a service\"), \" (PaaS) products that use \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"OS-level virtualization\"), \" to deliver software in packages called containers. \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"Containers\"), \" are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through \", mdx(Link, {\n    href: \"https://docs.docker.com/network/\",\n    mdxType: \"Link\"\n  }, \"well defined channels\"), \". All containers are run by a single \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/Kernel_(operating_system)\",\n    mdxType: \"Link\"\n  }, \"operating-system kernel\"), \" and are thus more lightweight than \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/Virtual_machine\",\n    mdxType: \"Link\"\n  }, \"virtual machines\"), \".\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"img\", {\n    \"src\": \"https://miro.medium.com/max/2798/1*3dH8hl3ovZj5H9zuHShAXQ.png\",\n    \"alt\": \"Docker Networking\"\n  })), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Conclusion\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"p\", null, \"Docker is a virtualization solution, more lightweight, therefore easier to use in development and production, as well as to scale, than existing VM solutions. Just by using docker you can create a self-contained ecosystem that can scale easily, and be deployed prebuilt / pre-configured, with little or no overhead.\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Docker\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"How does it work?\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Terminology\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"container\"), \" The completed container. Think of it as a running VM.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"image\"), \" The built image that the container will be running.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"build steps\"), \" The steps used to build an image\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Dockerfile\"), \" A recipy based describing the build steps\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"The \\\"Ikea\\\" of Docker\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Dockerfile\"), \": It all starts with such a file\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Someone(thing) will build an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"image\"), \" based on the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Dockerfile\"), \", Docker executing the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"build steps\"), \" described\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Someone will use the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"image\"), \" to run a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"container\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Some more concepts\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Network - A virtual network created between containers\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Volume - A shared (if specified) drive/volume/directory\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"run a hello world\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"run a port expose on jsld-html\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"run a volume on jsld-hmtl\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"run a build on jsld-html\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"run a background jsld-ping-pong\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"kill a background jsld-ping-pong\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"run a ping pong on a background jsld-ping-pong\"))), mdx(\"h1\", null, \"Crash Course\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"What have we learned?\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"docker\"), \" is the main command used.\"), mdx(\"li\", null, \"To execute something, we need to use the \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"docker run\"), \" command\"), mdx(\"li\", null, \"To build something, we need to use the \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"docker build\"), \" command\"), mdx(\"li\", null, \"To see what docker processes (containers) are running use the \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"docker ps\"), \" command\"), mdx(\"li\", null, \"To kill a process, we need to use the \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"docker kill\"), \" command\"), mdx(\"li\", null, \"To execute code on an already existing container, we need to use the \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"docker exec\"), \" command\"), mdx(\"li\", null, \"All of these commands have a lot of arguments\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Run\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"$ docker run\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Run\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Arguments:\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"--name\"), \": Will give the container a name\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"-i\"), \": Will run in interactive mode\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"-t\"), \": Will run in tty mode (will allow terminal use while interactive)\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"-it\"), \": A combination of the above. In translation: open a terminal connection\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"-d\"), \": Will run in daemon mode (background process)\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"--rm\"), \": Will remove the container on exit\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"<command>\"), \": Will override the default command\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Run - Exercises\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"$ docker run\"), mdx(\"h2\", null, \"Exercises\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Run - Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Note:\"), mdx(\"p\", null, \"Throughout the exercises we will be using\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ code\\n\")), mdx(\"p\", null, \"for code executed in the host machine, and\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"> code\\n\")), mdx(\"p\", null, \"for code executed in the container.\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Run - Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"First Exercise\"), mdx(\"p\", null, \"Spin up an alpine docker container, printing the message \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"Hello World\\\"\"), \";\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker run alpine echo 'hello world'\\n\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Run - Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Second Exercise\"), mdx(\"p\", null, \"Spin up an alpine docker container, listing the contents of the current folder.\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker run alpine ls -al\\n\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Run - Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Third Exercise\"), mdx(\"p\", null, \"Spin up an alpine docker container, running in interactive mode and execute the above commands, as well as printing out the current path.\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker run alpine ls -al\\n> echo 'hello world'\\n> ls -al \\n> pwd\\n\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Build\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"$ docker build\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Build\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Arguments:\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"-t\"), \": Will give the image a name\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"--build-arg\"), \": An argument used in build steps\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"-f\"), \": The name of the Dockerfile (ex: Dockerfile.prod)\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"--no-cache\"), \": Attempt to build with no cache\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"<path>\"), \": The path to the Dockerfile / context\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Build - Exercises\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"$ docker build\"), mdx(\"h2\", null, \"Exercises\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Build - Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"First Exercise\"), mdx(\"p\", null, \"Build the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exercises/docker/build\"), \" exercise.\"), mdx(\"p\", null, \"In the above mentioned path, you will find a docker file. Your task is to only build the image.\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker build -t &lt;name&gt; .\\n\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Build - Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"First Exercise\"), mdx(\"p\", null, \"Run the image you've built earlier.\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker run &lt;name&gt;\\n\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Exec, Ps and Kill\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"$ docker exec\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Exec, Ps and Kill\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Arguments:\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"<id>\"), \": The ID or name of the container\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"<command>\"), \": The command to be run\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Exec, Ps and Kill\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"$ docker ps\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Exec, Ps and Kill\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Arguments:\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"-a\"), \": Will list all containers (including inactive)\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"-q\"), \": Will only print the IDs of the containers\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Exec, Ps and Kill\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"$ docker kill\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Exec, Ps and Kill\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Arguments:\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"<id(s)>\"), \": The ID (or list of IDs) of containers to be killed\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Exec, Ps and Kill - Exercises\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"$ docker exec\"), mdx(\"h2\", null, \"Exercises\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Exec, Ps and Kill - Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"First Exercise\"), mdx(\"p\", null, \"Run the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sabinmarcu/jsld-ping-pong\"), \" image, and list the contents of the current directory.\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Exec, Ps and Kill - Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"p\", null, \"NOTE: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Without \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-it\"), \", you will be unable to exit the container, short of using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker ps\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker kill\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Without \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"--name\"), \", you will be unable to execute a command on the container without using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker ps\"), \" to get the ID\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Exec, Ps and Kill - Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"First Exercise (cont'd)\"), mdx(\"p\", null, \"Run the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sabinmarcu/jsld-ping-pong\"), \" image, and list the contents of the current directory.\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker run -it --name ping-pong sabinmarcu/jsld-ping-pong\\n$ docker exec ping-pong ls -al\\n\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Exec, Ps and Kill - Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Second Exercise\"), mdx(\"p\", null, \"Run the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sabinmarcu/jsld-ping-pong\"), \" image, and execute the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./ping.sh\"), \" command after running.\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Exec, Ps and Kill - Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"p\", null, \"NOTE: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There is no need to exit the running container between this exercise and the one before\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Without \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-it\"), \", you will be unable to exit the container, short of using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker ps\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker kill\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Without \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"--name\"), \", you will be unable to execute a command on the container without using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker ps\"), \" to get the ID\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Docker - Exec, Ps and Kill - Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Second Exercise (cont'd)\"), mdx(\"p\", null, \"Run the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sabinmarcu/jsld-ping-pong\"), \" image, and execute the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./ping.sh\"), \" command after running.\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker run -it --name ping-pong sabinmarcu/jsld-ping-pong\\n$ docker exec ping-pong ./ping.sh\\n\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Dockerfile\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Dockerfile\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Dockerfile\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\"\n  }), \"FROM alpine\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"Any dockerfile should start with a point of origin.\"), mdx(\"p\", null, \"In this case, we're using a bare-bones alpine linux distribution.\"), mdx(\"p\", null, \"Other options are, for example: \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"ubuntu\"), \", \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"node\"), \", \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"python\"), \", etc...\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-makefile\",\n    \"metastring\": \"3\"\n  }), \"FROM alpine\\n\\nRUN app add node\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"One of the most used commands is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"run\"), \" command. \"), mdx(\"p\", null, \"It will simply execute a command on the container, at build-time.\"), mdx(\"p\", null, \"Basically, anything that you \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"can\"), \" use in the container (basic linux tools, such as: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ls\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pwd\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cd\"), \", etc and subsequent installed tools) will function here.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\",\n    \"metastring\": \"5:6,3[13:17]\",\n    \"5:6,3[13:17]\": true\n  }), \"FROM alpine\\n\\nRUN app add node\\n\\nCOPY package.json .\\nCOPY package-lock.json .\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"The second-most used command in Dockerfiles is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"copy\"), \" command;\"), mdx(\"p\", null, \"Its purpose is to copy files from the host operating system to the container, to be used in future build steps.\"), mdx(\"p\", null, \"In this case, we're copying the dependencies files for a nodejs application.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\",\n    \"metastring\": \"8,3[13:17]\",\n    \"8,3[13:17]\": true\n  }), \"FROM alpine\\n\\nRUN app add node\\n\\nCOPY package.json .\\nCOPY package-lock.json .\\n\\nRUN npm install\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"Since we have a list of dependencies, we can now install them.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\",\n    \"metastring\": \"10:11,3[13:17]\",\n    \"10:11,3[13:17]\": true\n  }), \"FROM alpine\\n\\nRUN app add node\\n\\nCOPY package.json .\\nCOPY package-lock.json .\\n\\nRUN npm install\\n\\nENTRYPOINT echo \\\"NODE: $(node -v) & NPM: $(npm -v)\\\"\\nCMD npm run start\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"To actually run something in the container, we have a few options.\"), mdx(\"p\", null, \"One is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"entrypoint\"), \" command. It defines how the container should execute if ran by itself.\"), mdx(\"p\", null, \"Another is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cmd\"), \" command. It is similar to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"entrypoint\"), \" command, but it can be overriden while running the container.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\",\n    \"metastring\": \"10:11\",\n    \"10:11\": true\n  }), \"FROM alpine\\n\\nRUN app add node\\n\\nCOPY package.json .\\nCOPY package-lock.json .\\n\\nRUN npm install\\n\\nENTRYPOINT echo \\\"NODE: $(node -v) & NPM: $(npm -v)\\\"\\nCMD npm run start\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"Let's take a closer look at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"entrypoint\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cmd\"), \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Entrypoint\"), \" is an instruction always executed at a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker run\"), \" command, whereas\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cmd\"), \" is an instruction that can be overriden at run time. \"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\",\n    \"metastring\": \"1[6:11],5:6\",\n    \"1[6:11],5:6\": true\n  }), \"FROM mongo\\n\\n[...]\\n\\nENTRYPOINT mongod &\\nCMD mongo\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"For instance, if we have a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"MongoDB\"), \" instance, which, naturally, supplies a server (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mongod\"), \") and a client to manipulate and inspect data (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mongo\"), \"), we'd want the server to be always on.\"), mdx(\"p\", null, \"Therefore, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"entrypoint\"), \" must be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mongod\"), \", and the command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mongo\"), \". If, for instance, I need to run bash, or some import script on the container at runtime, I can make sure that the mongo server is online, regardless of run command.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-makefile\",\n    \"metastring\": \"1\"\n  }), \"FROM nginx\\n\\nCOPY index.html /www\\nRUN mkdir -p /www/pages\\nVOLUME /pages\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"Let's talk files and directories. File communication can happen in two ways in Docker. \"), mdx(\"p\", null, \"Let's assume we want the following structure for a simple HTTP server (let's use nginx for this):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"/\\n  - index.html\\n  - www/\\n    - page1.html\\n    - page2.html\\n    ...\\n\")))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-makefile\",\n    \"metastring\": \"3\"\n  }), \"FROM nginx\\n\\nCOPY index.html /www\\nRUN mkdir -p /www/pages\\nVOLUME /pages\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"One of the methods used for file transfer would be the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"copy\"), \" instruction, as pointed out earlier.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\",\n    \"metastring\": \"4:5\",\n    \"4:5\": true\n  }), \"FROM nginx\\n\\nCOPY index.html /www\\nRUN mkdir -p /www/pages\\nVOLUME /pages\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"However, for a number of reason, copying files and re-building the image is a time-consuming, and, ultimately, needless procedure.\"), mdx(\"p\", null, \"Therefore, volumes were introduced. Volumes are simple mounts, that act, in simplistic terms, like symlinks (in Windows, Unix, etc).\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-makefile\",\n    \"metastring\": \"5\"\n  }), \"FROM nginx\\n\\nCOPY index.html /www\\nRUN mkdir -p /www/pages\\nVOLUME /pages\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"At runtime, the volume paths (on host and guest, both) must be specified, as well as, optionally, the mount type (read only, read write, etc).\"), mdx(\"p\", null, \"For instance, the current folder (containing HTML files) can be linked to the /www/pages folder in the container, as follows: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ docker run -v `pwd`:/www/pages ...\\n\")))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-makefile\",\n    \"metastring\": \"5\"\n  }), \"FROM nginx\\n\\nCOPY index.html /www\\nRUN mkdir -p /www/pages\\nVOLUME /pages\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"In this case, any file modified on the host directory, will have its changes reflected on the container. \"), mdx(\"p\", null, \"Just as well, any changes occurring on the container will be reflected on the host.\"), mdx(\"p\", null, \"This is useful in 2 cases: Either during development, so that rebuilding is unnecessary, either in production, with shared data between containers and hosts (the data of a database, for instace, so that it persists between container starting and stopping)\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\"\n  }), \"...\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"Next, we need to talk about making Dockerfiles more dynamic. For instance, by providing arguments at build-time, or providing environment variables at run-time.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\"\n  }), \"...\\n\")), mdx(\"div\", null, mdx(\"img\", {\n    \"src\": \"https://d33wubrfki0l68.cloudfront.net/8d799fc311d166c3a7d9f1a7970e1dd1d43bf141/0a855/images/docker-env-vars/docker_environment_build_args.png\",\n    \"alt\": \"ARG and ENV\"\n  }))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-makefile\",\n    \"metastring\": \"1\"\n  }), \"ARG NODE_VER=10\\n\\nFROM node:${NODE_VER}\\n\\nARG NODE_VER\\n\\nENV ENV_VER=$NODE_VER\\n\\nRUN echo $NODE_VER\\nRUN echo $ENV_VER\\n\\nCMD env\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ARG\"), \" instruction will make a variable available inside the container, which can receive a default value, and can be configured at build-time (by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--build-arg\"), \" argument).\"), mdx(\"p\", null, \"It is also the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"only\"), \" instruction that can be used \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"before\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FROM\"), \". \"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\",\n    \"metastring\": \"3,5\",\n    \"3,5\": true\n  }), \"ARG NODE_VER=10\\n\\nFROM node:${NODE_VER}\\n\\nARG NODE_VER\\n\\nENV ENV_VER=$NODE_VER\\n\\nRUN echo $NODE_VER\\nRUN echo $ENV_VER\\n\\nCMD env\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"We can then use the argument in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FROM\"), \" instruction, and, since the initial \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ARG\"), \" instruction was before the first \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FROM\"), \", we need to bring in in, again.\"), mdx(\"p\", null, \"Why? Think in term of intermediate steps. Before the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FROM\"), \" command, nothing really exists.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-makefile\",\n    \"metastring\": \"7\"\n  }), \"ARG NODE_VER=10\\n\\nFROM node:${NODE_VER}\\n\\nARG NODE_VER\\n\\nENV ENV_VER=$NODE_VER\\n\\nRUN echo $NODE_VER\\nRUN echo $ENV_VER\\n\\nCMD env\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"To define an environment variable, we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ENV\"), \", which, like the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ARG\"), \" instruction takes in an optional default value.\"), mdx(\"p\", null, \"In this case, why not set it as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NODE_VER\"), \" argument?\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\",\n    \"metastring\": \"9:10\",\n    \"9:10\": true\n  }), \"ARG NODE_VER=10\\n\\nFROM node:${NODE_VER}\\n\\nARG NODE_VER\\n\\nENV ENV_VER=$NODE_VER\\n\\nRUN echo $NODE_VER\\nRUN echo $ENV_VER\\n\\nCMD env\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"While running this, you will notice that both of these will return the same value.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"12\": true,\n    \"className\": \"language-makefile\",\n    \"metastring\": \"12\"\n  }), \"ARG NODE_VER=10\\n\\nFROM node:${NODE_VER}\\n\\nARG NODE_VER\\n\\nENV ENV_VER=$NODE_VER\\n\\nRUN echo $NODE_VER\\nRUN echo $ENV_VER\\n\\nCMD env\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"If we run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"env\"), \" as a default command on the image, you will notice that, upon running it, the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ENV_VER\"), \" will be the same as the one we used while building. \"), mdx(\"p\", null, \"Just as well, we can over-write the value at run-time by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-e\"), \" argument for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker run\"), \": \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ docker run -e ENV_VER=25\\n\")))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"12\": true,\n    \"className\": \"language-makefile\",\n    \"metastring\": \"12\"\n  }), \"ARG NODE_VER=10\\n\\nFROM node:${NODE_VER}\\n\\nARG NODE_VER\\n\\nENV ENV_VER=$NODE_VER\\n\\nRUN echo $NODE_VER\\nRUN echo $ENV_VER\\n\\nCMD env\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"Similarly, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env\"), \" (dot-env) file can be used to supply all arguments in one go\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ docker run --env-file .env\\n\")))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\"\n  }), \"FROM node\\n\\n[...]\\n\\nEXPOSE 80\\nCMD node server.js -p 80\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"The last thing we should talk about today is data transfer in the form of information, rather than files, at run-time.\"), mdx(\"p\", null, \"This can be achieved through exporting and mapping ports. For instance, we can have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodejs\"), \" application running on port \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"80\"), \" within the container, which we will map to port \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"8000\"), \" on the host, thus making the app accessible at port 8000.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-makefile\",\n    \"metastring\": \"5\"\n  }), \"FROM node\\n\\n[...]\\n\\nEXPOSE 80\\nCMD node server.js -p 80\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"First, we expose the port. Of course, this would be a great place to use args, but we'll leave that for tomorrow.\"), mdx(\"p\", null, \"Then, after the image is built, we can bind the ports while running the container by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-p\"), \" argument:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ docker run -p 80:8000 \\n\")))))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Dockerfile Exercises\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Dockerfile Exercises\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Dockerfile Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"First Exercise\"), mdx(\"p\", null, \"Build the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exercises/docker/arg-env\"), \" image, with default arguments, and with supplied arguments.\"), mdx(\"p\", null, \"Then, run the image, with both default arguments, and with a supplied argument.\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Dockerfile Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"First Exercise (cont'd)\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker build -t <name>\\n$ docker build -t <name> --build-arg NODE_VER=8\\n\\n$ docker run <name>\\n$ docker run -e ENV_VER=25 <name>\\n\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Dockerfile Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Second Exercise\"), mdx(\"p\", null, \"Build and experiment with the ping example.\"), mdx(\"details\", null, mdx(\"summary\", null, \"Hint\"), mdx(\"p\", null, \"One thing you could do is mount the current folder as a volume instead of copying, and change the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ping.sh\"), \" script between \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker exec\"), \" calls.\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Dockerfile Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Third Exercise\"), mdx(\"p\", null, \"Build and experiment with the html example.\"), mdx(\"details\", null, mdx(\"summary\", null, \"Hint\"), mdx(\"p\", null, \"By default, this Dockerfile will copy the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.html\"), \" file and expose port \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"80\"), \" to the world. \"), mdx(\"p\", null, \"Try to make it run with a volume mount, and bind port 80 to something accessible on the host.\"), mdx(\"p\", null, \"Change the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.html\"), \" file, and verify that the changes are replicated in your browser.\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"30a0df64-d54c-5a23-ac14-16057fe394e5","slug":"/jsleague-docker","title":"Intro to Docker"}}}