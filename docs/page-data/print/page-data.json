{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"b6314a23-afd0-5ede-9d4f-29425d705097","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = [themes[\"default\"]];\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(SectionTitle, {\n    mdxType: \"SectionTitle\"\n  }, \"Intro to Docker\"), mdx(Layout, {\n    noTitle: true,\n    noSubtitle: true,\n    icon: 'https://s3.amazonaws.com/media-p.slid.es/uploads/841906/images/5646147/logo-slim-white.png',\n    background: 'https://s3.amazonaws.com/media-p.slid.es/uploads/841906/images/5646146/Screen_Shot_2019-01-05_at_1.59.35_PM.png',\n    style: {\n      color: 'white'\n    },\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Intro to Docker\"), mdx(\"h4\", null, \"25-26 Nov. 2019\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Overview\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Overview\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Overview\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Agenda - Day 1\"), mdx(Split, {\n    sx: {\n      textAlign: 'left',\n      fontSize: 24\n    },\n    mdxType: \"Split\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"General Introduction\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Comparison to other virtualization solutions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Expose Ports\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Volume Mounts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Running Examples & Exercises\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dockerfile\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Arguments\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Environment Variables\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Building a docker image\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"docker-compose.yml\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Running a docker-compose stack\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Overview\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Agenda - Day 2\"), mdx(Split, {\n    sx: {\n      textAlign: 'left',\n      fontSize: 24\n    },\n    mdxType: \"Split\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lifecycle & Process Management\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Interacting with running images\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Networks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Volumes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Types of Mounts\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dependency & Restart Management\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Image management & Tagging\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pushing to remote\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Env files\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dynamic configs (develop, testing, production)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CI\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Introduction\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(Words, {\n    style: {\n      maxWidth: 500\n    },\n    mdxType: \"Words\"\n  }, mdx(Link, {\n    noColor: true,\n    mdxType: \"Link\"\n  }, \"Docker\"), \" is a set of \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/Platform_as_a_service\",\n    mdxType: \"Link\"\n  }, \"platform as a service\"), \" (PaaS) products that use \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"OS-level virtualization\"), \" to deliver software in packages called containers. \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"Containers\"), \" are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through \", mdx(Link, {\n    href: \"https://docs.docker.com/network/\",\n    mdxType: \"Link\"\n  }, \"well defined channels\"), \". All containers are run by a single \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/Kernel_(operating_system)\",\n    mdxType: \"Link\"\n  }, \"operating-system kernel\"), \" and are thus more lightweight than \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/Virtual_machine\",\n    mdxType: \"Link\"\n  }, \"virtual machines\"), \".\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Dockerfile\"), mdx(Layout, {\n    heading: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Dockerfile\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Dockerfile\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\"\n  }), \"FROM alpine\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"Any dockerfile should start with a point of origin.\"), mdx(\"p\", null, \"In this case, we're using a bare-bones alpine linux distribution.\"), mdx(\"p\", null, \"Other options are, for example: \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"ubuntu\"), \", \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"node\"), \", \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"python\"), \", etc...\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-3\"\n  }), \"FROM alpine\\n\\nRUN app add node\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"One of the most used commands is the run command. \"), mdx(\"p\", null, \"It will simply execute a command on the container, at build-time.\"), mdx(\"p\", null, \"Basically, anything that you \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"can\"), \" use in the container (basic linux tools, such as: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ls\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pwd\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cd\"), \", etc and subsequent installed tools) will function here.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-5:6,3[13:17]\"\n  }), \"FROM alpine\\n\\nRUN app add node\\n\\nCOPY package.json .\\nCOPY package-lock.json .\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"The second-most used command in Dockerfiles is the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"copy\"), \" command;\"), mdx(\"p\", null, \"Its purpose is to copy files from the host operating system to the container, to be used in future build steps.\"), mdx(\"p\", null, \"In this case, we're copying the dependencies files for a nodejs application.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-8,3[13:17]\"\n  }), \"FROM alpine\\n\\nRUN app add node\\n\\nCOPY package.json .\\nCOPY package-lock.json .\\n\\nRUN npm install\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"Since we have a list of dependencies, we can now install them.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-10:11,3[13:17]\"\n  }), \"FROM alpine\\n\\nRUN app add node\\n\\nCOPY package.json .\\nCOPY package-lock.json .\\n\\nRUN npm install\\n\\nENTRYPOINT echo \\\"NODE: $(node -v) & NPM: $(npm -v)\\\"\\nCMD npm run start\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"To actually run something in the container, we have a few options.\"), mdx(\"p\", null, \"One is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"entrypoint\"), \" command. It defines how the container should execute if ran by itself.\"), mdx(\"p\", null, \"Another is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cmd\"), \" command. It is similar to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"entrypoint\"), \" command, but it can be overriden while running the container.\"))))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Dockerfile Exercises\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Dockerfile Exercises\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Dockerfile Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"First Exercise\"), mdx(\"p\", null, \"Spin an alpine docker container, executing an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"echo 'hello world'\"), \";\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker run alpine echo 'hello world'\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b6314a23-afd0-5ede-9d4f-29425d705097","slug":"/jsleague-docker","title":"Intro to Docker"}}}