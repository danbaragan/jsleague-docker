{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"b6314a23-afd0-5ede-9d4f-29425d705097","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = [themes[\"default\"]];\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(SectionTitle, {\n    mdxType: \"SectionTitle\"\n  }, \"Intro to Docker\"), mdx(Layout, {\n    noTitle: true,\n    noSubtitle: true,\n    icon: 'https://s3.amazonaws.com/media-p.slid.es/uploads/841906/images/5646147/logo-slim-white.png',\n    background: 'https://s3.amazonaws.com/media-p.slid.es/uploads/841906/images/5646146/Screen_Shot_2019-01-05_at_1.59.35_PM.png',\n    style: {\n      color: 'white'\n    },\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Intro to Docker\"), mdx(\"h4\", null, \"25-26 Nov. 2019\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Overview\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Overview\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Overview\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Agenda - Day 1\"), mdx(Split, {\n    sx: {\n      textAlign: 'left',\n      fontSize: 24\n    },\n    mdxType: \"Split\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"General Introduction\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Comparison to other virtualization solutions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Expose Ports\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Volume Mounts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Running Examples & Exercises\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dockerfile\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Arguments\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Environment Variables\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Building a docker image\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"docker-compose.yml\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Running a docker-compose stack\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Overview\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Agenda - Day 2\"), mdx(Split, {\n    sx: {\n      textAlign: 'left',\n      fontSize: 24\n    },\n    mdxType: \"Split\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lifecycle & Process Management\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Interacting with running images\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Networks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Volumes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Types of Mounts\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dependency & Restart Management\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Image management & Tagging\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pushing to remote\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Env files\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dynamic configs (develop, testing, production)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CI\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Introduction\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(Words, {\n    mdxType: \"Words\"\n  }, mdx(Link, {\n    noColor: true,\n    mdxType: \"Link\"\n  }, \"Docker\"), \" is a set of \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/Platform_as_a_service\",\n    mdxType: \"Link\"\n  }, \"platform as a service\"), \" (PaaS) products that use \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"OS-level virtualization\"), \" to deliver software in packages called containers. \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"Containers\"), \" are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through \", mdx(Link, {\n    href: \"https://docs.docker.com/network/\",\n    mdxType: \"Link\"\n  }, \"well defined channels\"), \". All containers are run by a single \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/Kernel_(operating_system)\",\n    mdxType: \"Link\"\n  }, \"operating-system kernel\"), \" and are thus more lightweight than \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/Virtual_machine\",\n    mdxType: \"Link\"\n  }, \"virtual machines\"), \".\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(Split, {\n    mdxType: \"Split\"\n  }, mdx(Words, {\n    mdxType: \"Words\"\n  }, mdx(Link, {\n    noColor: true,\n    mdxType: \"Link\"\n  }, \"Docker\"), \" is a set of \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/Platform_as_a_service\",\n    mdxType: \"Link\"\n  }, \"platform as a service\"), \" (PaaS) products that use \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"OS-level virtualization\"), \" to deliver software in packages called containers. \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"Containers\"), \" are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through \", mdx(Link, {\n    noColor: true,\n    href: \"https://docs.docker.com/network/\",\n    mdxType: \"Link\"\n  }, \"well defined channels\"), \". All containers are run by a single \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/Kernel_(operating_system)\",\n    mdxType: \"Link\"\n  }, \"operating-system kernel\"), \" and are thus more lightweight than \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/Virtual_machine\",\n    mdxType: \"Link\"\n  }, \"virtual machines\"), \".\"), mdx(Words, {\n    mdxType: \"Words\"\n  }, mdx(Link, {\n    noColor: true,\n    mdxType: \"Link\"\n  }, \"Platform as a Service (PaaS)\"), \" or \", mdx(Link, {\n    noColor: true,\n    mdxType: \"Link\"\n  }, \"Application Platform as a Service (aPaaS)\"), \" or platform-based service is a category of \", mdx(Link, {\n    href: \"https://ww.wikiwand.com/en/Cloud_computing#Service_models\",\n    mdxType: \"Link\"\n  }, \"cloud computing services\"), \" that provides a \", mdx(Link, {\n    href: \"www.wikiwand.com/en/Computing_platform\",\n    mdxType: \"Link\"\n  }, \"platform\"), \" allowing customers to \", mdx(Link, {\n    noColor: true,\n    mdxType: \"Link\"\n  }, \"develop, run and manage applications\"), \" without the complexity of building and maintaining the infrastructure typically associated with developing and launching an app.\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(Words, {\n    mdxType: \"Words\"\n  }, mdx(Link, {\n    noColor: true,\n    mdxType: \"Link\"\n  }, \"Docker\"), \" is a set of \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/Platform_as_a_service\",\n    mdxType: \"Link\"\n  }, \"platform as a service\"), \" (PaaS) products that use \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"OS-level virtualization\"), \" to deliver software in packages called containers. \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"Containers\"), \" are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through \", mdx(Link, {\n    noColor: true,\n    href: \"https://docs.docker.com/network/\",\n    mdxType: \"Link\"\n  }, \"well defined channels\"), \". All containers are run by a single \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/Kernel_(operating_system)\",\n    mdxType: \"Link\"\n  }, \"operating-system kernel\"), \" and are thus more lightweight than \", mdx(Link, {\n    href: \"https://www.wikiwand.com/en/Virtual_machine\",\n    mdxType: \"Link\"\n  }, \"virtual machines\"), \".\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"img\", {\n    \"src\": \"https://s3.amazonaws.com/media-p.slid.es/uploads/776/images/6787931/pasted-from-clipboard.png\",\n    \"alt\": \"Docker VM Comparison\"\n  })), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(Words, {\n    mdxType: \"Words\"\n  }, mdx(Link, {\n    noColor: true,\n    mdxType: \"Link\"\n  }, \"Docker\"), \" is a set of \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/Platform_as_a_service\",\n    mdxType: \"Link\"\n  }, \"platform as a service\"), \" (PaaS) products that use \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"OS-level virtualization\"), \" to deliver software in packages called containers. \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/OS-level_virtualization\",\n    mdxType: \"Link\"\n  }, \"Containers\"), \" are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through \", mdx(Link, {\n    href: \"https://docs.docker.com/network/\",\n    mdxType: \"Link\"\n  }, \"well defined channels\"), \". All containers are run by a single \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/Kernel_(operating_system)\",\n    mdxType: \"Link\"\n  }, \"operating-system kernel\"), \" and are thus more lightweight than \", mdx(Link, {\n    noColor: true,\n    href: \"https://www.wikiwand.com/en/Virtual_machine\",\n    mdxType: \"Link\"\n  }, \"virtual machines\"), \".\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"img\", {\n    \"src\": \"https://miro.medium.com/max/2798/1*3dH8hl3ovZj5H9zuHShAXQ.png\",\n    \"alt\": \"Docker Networking\"\n  })), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Invert, {\n    mdxType: \"Invert\"\n  }, mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Conclusion\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"p\", null, \"Docker is a virtualization solution, more lightweight, therefore easier to use in development and production, as well as to scale, than existing VM solutions. Just by using docker you can create a self-contained ecosystem that can scale easily, and be deployed prebuilt / pre-configured, with little or no overhead.\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Crash Course\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"What have we learned?\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"docker\"), \" is the main command used.\"), mdx(\"li\", null, \"To execute something, we need to use the \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"docker run\"), \" command\"), mdx(\"li\", null, \"To build something, we need to use the \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"docker build\"), \" command\"), mdx(\"li\", null, \"To see what docker processes (containers) are running use the \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"docker ps\"), \" command\"), mdx(\"li\", null, \"To kill a process, we need to use the \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"docker kill\"), \" command\"), mdx(\"li\", null, \"To execute code on an already existing container, we need to use the \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"docker exec\"), \" command\"), mdx(\"li\", null, \"All of these commands have a lot of arguments\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Docker\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"How does it work?\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Terminology\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"container\"), \" The completed container. Think of it as a running VM.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"image\"), \" The built image that the container will be running.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"build steps\"), \" The steps used to build an image\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Dockerfile\"), \" A recipy based describing the build steps\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"The \\\"Ikea\\\" of Docker\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Dockerfile\"), \": It all starts with such a file\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Someone(thing) will build an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"image\"), \" based on the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Dockerfile\"), \", Docker executing the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"build steps\"), \" described\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Someone will use the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"image\"), \" to run a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"container\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"$ docker run\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Arguments:\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"--name\"), \": Will give the container a name\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"-i\"), \": Will run in interactive mode\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"-t\"), \": Will run in tty mode (will allow terminal use while interactive)\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"-it\"), \": A combination of the above. In translation: open a terminal connection\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"-d\"), \": Will run in daemon mode (background process)\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"--rm\"), \": Will remove the container on exit\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"<command>\"), \": Will override the default command\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"$ docker run\"), mdx(\"h2\", null, \"Exercises\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Invert, {\n    mdxType: \"Invert\"\n  }, mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Note:\"), mdx(\"p\", null, \"Throughout the exercises we will be using\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ code\\n\")), mdx(\"p\", null, \"for code executed in the host machine, and\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"> code\\n\")), mdx(\"p\", null, \"for code executed in the container.\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"First Exercise\"), mdx(\"p\", null, \"Spin up an alpine docker container, printing the message \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"Hello World\\\"\"), \";\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker run alpine echo 'hello world'\\n\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Second Exercise\"), mdx(\"p\", null, \"Spin up an alpine docker container, listing the contents of the current folder.\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker run alpine ls -al\\n\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Third Exercise\"), mdx(\"p\", null, \"Spin up an alpine docker container, running in interactive mode and execute the above commands, as well as printing out the current path.\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker run alpine ls -al\\n> echo 'hello world'\\n> ls -al \\n> pwd\\n\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"$ docker build\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Arguments:\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"-t\"), \": Will give the image a name\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"--build-arg\"), \": An argument used in build steps\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"-f\"), \": The name of the Dockerfile (ex: Dockerfile.prod)\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"--no-cache\"), \": Attempt to build with no cache\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"<path>\"), \": The path to the Dockerfile / context\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"$ docker build\"), mdx(\"h2\", null, \"Exercises\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"First Exercise\"), mdx(\"p\", null, \"Build the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exercises/docker/build\"), \" exercise.\"), mdx(\"p\", null, \"In the above mentioned path, you will find a docker file. Your task is to only build the image.\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker build -t &lt;name&gt; .\\n\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"First Exercise\"), mdx(\"p\", null, \"Run the image you've built earlier.\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker run &lt;name&gt;\\n\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"$ docker exec\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Arguments:\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"<id>\"), \": The ID or name of the container\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"<command>\"), \": The command to be run\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"$ docker ps\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Arguments:\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"-a\"), \": Will list all containers (including inactive)\"), mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"-q\"), \": Will only print the IDs of the containers\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"$ docker kill\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Arguments:\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"<id(s)>\"), \": The ID (or list of IDs) of containers to be killed\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"$ docker exec\"), mdx(\"h2\", null, \"Exercises\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"First Exercise\"), mdx(\"p\", null, \"Run the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sabinmarcu/jsld-ping-pong\"), \" image, and list the contents of the current directory.\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"p\", null, \"NOTE: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Without \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-it\"), \", you will be unable to exit the container, short of using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker ps\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker kill\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Without \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"--name\"), \", you will be unable to execute a command on the container without using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker ps\"), \" to get the ID\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"First Exercise (cont'd)\"), mdx(\"p\", null, \"Run the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sabinmarcu/jsld-ping-pong\"), \" image, and list the contents of the current directory.\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker run -it --name ping-pong sabinmarcu/jsld-ping-pong\\n$ docker exec ping-pong ls -al\\n\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Second Exercise\"), mdx(\"p\", null, \"Run the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sabinmarcu/jsld-ping-pong\"), \" image, and execute the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./ping.sh\"), \" command after running.\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"p\", null, \"NOTE: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There is no need to exit the running container between this exercise and the one before\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Without \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-it\"), \", you will be unable to exit the container, short of using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker ps\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker kill\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Without \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"--name\"), \", you will be unable to execute a command on the container without using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker ps\"), \" to get the ID\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Second Exercise (cont'd)\"), mdx(\"p\", null, \"Run the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sabinmarcu/jsld-ping-pong\"), \" image, and execute the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./ping.sh\"), \" command after running.\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker run -it --name ping-pong sabinmarcu/jsld-ping-pong\\n$ docker exec ping-pong ./ping.sh\\n\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Dockerfile\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Dockerfile\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Dockerfile\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\"\n  }), \"FROM alpine\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"Any dockerfile should start with a point of origin.\"), mdx(\"p\", null, \"In this case, we're using a bare-bones alpine linux distribution.\"), mdx(\"p\", null, \"Other options are, for example: \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"ubuntu\"), \", \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"node\"), \", \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"python\"), \", etc...\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-3\"\n  }), \"FROM alpine\\n\\nRUN app add node\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"One of the most used commands is the run command. \"), mdx(\"p\", null, \"It will simply execute a command on the container, at build-time.\"), mdx(\"p\", null, \"Basically, anything that you \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"can\"), \" use in the container (basic linux tools, such as: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ls\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pwd\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cd\"), \", etc and subsequent installed tools) will function here.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-5:6,3[13:17]\"\n  }), \"FROM alpine\\n\\nRUN app add node\\n\\nCOPY package.json .\\nCOPY package-lock.json .\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"The second-most used command in Dockerfiles is the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"copy\"), \" command;\"), mdx(\"p\", null, \"Its purpose is to copy files from the host operating system to the container, to be used in future build steps.\"), mdx(\"p\", null, \"In this case, we're copying the dependencies files for a nodejs application.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-8,3[13:17]\"\n  }), \"FROM alpine\\n\\nRUN app add node\\n\\nCOPY package.json .\\nCOPY package-lock.json .\\n\\nRUN npm install\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"Since we have a list of dependencies, we can now install them.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-10:11,3[13:17]\"\n  }), \"FROM alpine\\n\\nRUN app add node\\n\\nCOPY package.json .\\nCOPY package-lock.json .\\n\\nRUN npm install\\n\\nENTRYPOINT echo \\\"NODE: $(node -v) & NPM: $(npm -v)\\\"\\nCMD npm run start\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"To actually run something in the container, we have a few options.\"), mdx(\"p\", null, \"One is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"entrypoint\"), \" command. It defines how the container should execute if ran by itself.\"), mdx(\"p\", null, \"Another is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cmd\"), \" command. It is similar to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"entrypoint\"), \" command, but it can be overriden while running the container.\"))))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Dockerfile Exercises\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Dockerfile Exercises\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Dockerfile Exercises\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"First Exercise\"), mdx(\"p\", null, \"Spin an alpine docker container, executing an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"echo 'hello world'\"), \";\"), mdx(\"details\", null, mdx(\"summary\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker run alpine echo 'hello world'\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","isCreatedByStatefulCreatePages":false,"id":"b6314a23-afd0-5ede-9d4f-29425d705097","slug":"/jsleague-docker","title":"Intro to Docker"}}}